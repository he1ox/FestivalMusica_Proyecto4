{"version":3,"sources":["app.js","galeria.js"],"names":["navegacionFija","barra","document","querySelector","IntersectionObserver","entries","isIntersecting","classList","remove","add","observe","scrollNav","querySelectorAll","forEach","enlace","addEventListener","e","preventDefault","target","attributes","href","value","scrollIntoView","behavior","crearGaleria","galeria","i","imagen","createElement","src","dataset","imagenId","onclick","mostrarImagen","lista","appendChild","id","parseInt","overlay","cerrarImagen","textContent","body"],"mappings":"AAUA,SAAAA,iBAEA,MAAAC,EAAAC,SAAAC,cAAA,WAEA,IAAAC,sBAAA,SAAAC,GACAA,EAAA,GAAAC,eACAL,EAAAM,UAAAC,OAAA,QAGAP,EAAAM,UAAAE,IAAA,WAMAC,QAAAR,SAAAC,cAAA,oBAIA,SAAAQ,YAEAT,SAAAU,iBAAA,2BAQAC,SAAA,SAAAC,GAEAA,EAAAC,iBAAA,SAAA,SAAAC,GAEAA,EAAAC,iBAGAf,SAAAC,cAAAa,EAAAE,OAAAC,WAAAC,KAAAC,OAGAC,eAAA,CAEAC,SAAA,iBC/CA,SAAAC,eAEA,MAAAC,EAAAvB,SAAAC,cAAA,qBAGA,IAAA,IAAAuB,EAAA,EAAAA,GAAA,GAAAA,IAAA,CAEA,MAAAC,EAAAzB,SAAA0B,cAAA,OAEAD,EAAAE,IAAA,mBAAAH,SACAC,EAAAG,QAAAC,SAAAL,EAEAC,EAAAK,QAAAC,cAIA,MAAAC,EAAAhC,SAAA0B,cAAA,MAOAM,EAAAC,YAAAR,GAGAF,EAAAU,YAAAD,IAKA,SAAAD,cAAAjB,GACA,MAAAoB,EAAAC,SAAArB,EAAAE,OAAAY,QAAAC,UAGAJ,EAAAzB,SAAA0B,cAAA,OACAD,EAAAE,IAAA,oBAAAO,SAGA,MAAAE,EAAApC,SAAA0B,cAAA,OACAU,EAAAH,YAAAR,GACAW,EAAA/B,UAAAE,IAAA,WAGA6B,EAAAN,QAAA,IAAAM,EAAA9B,SAGA,MAAA+B,EAAArC,SAAA0B,cAAA,KACAW,EAAAC,YAAA,IACAD,EAAAhC,UAAAE,IAAA,cAGA8B,EAAAP,QAAA,IAAAM,EAAA9B,SAEA8B,EAAAH,YAAAI,GAGA,MAAAE,EAAAvC,SAAAC,cAAA,QACAsC,EAAAN,YAAAG,GAGAG,EAAAlC,UAAAE,IAAA,cAEA8B,EAAAP,QAAA,KACAS,EAAAlC,UAAAC,OAAA,eDpEAN,SAAAa,iBAAA,mBAAA,KAIAJ,YAEAX,mBCLAE,SAAAa,iBAAA,mBAAA,IAAAS","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () =>{\r\n    /*DOMContentLoaded, es ejecutado cuando todo el HTML\r\n    ha sido completamente cargado, sin esperar hojas de estilo, ni imagenes.\r\n    */\r\n    scrollNav();\r\n\r\n    navegacionFija();\r\n})\r\n\r\n\r\nfunction navegacionFija() {\r\n    //Intersection Observer\r\n    const barra = document.querySelector('.header');\r\n    //Registrar Intersection Observer\r\n    const observer = new IntersectionObserver(function(entries) {\r\n        if(entries[0].isIntersecting){\r\n            barra.classList.remove('fijo');\r\n        }\r\n        else {\r\n            barra.classList.add('fijo');\r\n        }\r\n    });\r\n\r\n\r\n    //Elemento a observar\r\n    observer.observe(document.querySelector('.sobre-festival'));\r\n}\r\n\r\n\r\nfunction scrollNav() {\r\n    //Seleccionamos todos los enlaces, mediante la clase del div y anidamos 'a' de enlaces\r\n    const enlaces = document.querySelectorAll('.navegacion-principal a');\r\n\r\n    /* !\r\n    No podemos añadir un addEventListener a 'enlaces' porque basicamente\r\n    es el conjunto de todos los enlaces.\r\n    Necesitamos seleccionar uno por uno */\r\n    \r\n\r\n    enlaces.forEach(function (enlace) {\r\n        //Registra cada enlace que recibe un click\r\n        enlace.addEventListener('click', function(e) {\r\n            //Pasamos el evento por 'e' y preveemos la accion por default.\r\n            e.preventDefault();\r\n\r\n            //Obtenemos el valor contenido en el atributo href del elemento que se da click\r\n            const seccion = document.querySelector(e.target.attributes.href.value)\r\n\r\n            //Se aplica scrollIntoView a la seccion que deseamos ir\r\n            seccion.scrollIntoView({\r\n                //Accedemos a la propiedad behavior\r\n                behavior: 'smooth' //Transicion suave entre secciones\r\n            });\r\n        })\r\n    })\r\n\r\n}","//Esperamos que todo el DOM este cargado para ejecutar la funcion\r\ndocument.addEventListener('DOMContentLoaded', () => crearGaleria());\r\n\r\n\r\nfunction crearGaleria(){\r\n    //seleccionamos la lista con la clase .galeria-imagenes\r\n    const galeria = document.querySelector('.galeria-imagenes');\r\n\r\n    //Cargamos imagen por imagen\r\n    for(let i = 1; i<=12 ; i++){\r\n        //creamos elemento img\r\n        const imagen = document.createElement('IMG');\r\n        //le pasamos en el src el directorio de la imagen\r\n        imagen.src = `build/img/thumb/${i}.webp`;\r\n        imagen.dataset.imagenId = i;\r\n\r\n        imagen.onclick = mostrarImagen;\r\n\r\n\r\n        //creamos elemento de la lista\r\n        const lista = document.createElement('LI');\r\n\r\n        /*Al <li> le pasamos una imagen. \r\n        De tal manera que \r\n        <li>\r\n            <img src=\"build/image/thumb/1.webp\"/>\r\n        </li>*/\r\n        lista.appendChild(imagen);\r\n\r\n        //Cada <li> será agregado al <ul> principal\r\n        galeria.appendChild(lista);\r\n    }\r\n}\r\n\r\n\r\nfunction mostrarImagen(e){\r\n    const id = parseInt(e.target.dataset.imagenId);\r\n\r\n    //Generar la imagen\r\n    const imagen = document.createElement('IMG');\r\n    imagen.src = `build/img/grande/${id}.webp`;\r\n\r\n\r\n    const overlay = document.createElement('DIV');\r\n    overlay.appendChild(imagen);\r\n    overlay.classList.add('overlay');\r\n\r\n    //Cuando se da click se cierra la imagen\r\n    overlay.onclick = () => overlay.remove();\r\n\r\n    //Boton para cerrar la imagen\r\n    const cerrarImagen = document.createElement('P');\r\n    cerrarImagen.textContent = 'X';\r\n    cerrarImagen.classList.add('btn-cerrar');\r\n\r\n    //Cuando se presiona, se cierra\r\n    cerrarImagen.onclick = () => overlay.remove();\r\n    \r\n    overlay.appendChild(cerrarImagen);\r\n    \r\n    //Mostrar en el html\r\n    const body = document.querySelector('body');\r\n    body.appendChild(overlay);\r\n    \r\n    //bloquear scroll\r\n    body.classList.add('fijar-body');\r\n    //Desbloquea el scroll view\r\n    cerrarImagen.onclick = () => {\r\n        body.classList.remove('fijar-body');\r\n    }\r\n}\r\n"]}